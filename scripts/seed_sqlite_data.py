#!/usr/bin/env python3
"""
Script para popular o banco SQLite com dados iniciais
EduAI - Sistema de Ensino Inteligente
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))

def seed_database():
    """Popula o banco com dados iniciais"""
    try:
        from src.core.database import db_manager
        
        print("üå± Iniciando popula√ß√£o do banco SQLite...")
        
        # Criar usu√°rio administrador
        print("üë§ Criando usu√°rio administrador...")
        admin_created = db_manager.create_user(
            nome="admin",
            idade=30,
            senha="admin123",
            nota=None
        )
        
        if admin_created:
            print("‚úÖ Usu√°rio administrador criado com sucesso!")
            
            # Atualizar perfil para admin
            admin_user = db_manager.get_user_by_name("admin")
            if admin_user:
                # Atualizar perfil usando SQL direto
                from src.core.sqlite_database import sqlite_db_manager
                sqlite_db_manager.execute_update(
                    "UPDATE usuario SET perfil = ? WHERE id = ?",
                    ("admin", admin_user['id'])
                )
                print("‚úÖ Perfil de administrador atribu√≠do!")
        else:
            print("‚ö†Ô∏è  Usu√°rio administrador j√° existe ou erro na cria√ß√£o")
        
        # Criar alguns usu√°rios de exemplo
        print("\nüë• Criando usu√°rios de exemplo...")
        users_data = [
            ("Jo√£o Silva", 25, "joao123", 8.5),
            ("Maria Santos", 22, "maria123", 7.8),
            ("Pedro Oliveira", 28, "pedro123", 9.2),
            ("Ana Costa", 24, "ana123", 8.0),
            ("Carlos Lima", 26, "carlos123", 7.5)
        ]
        
        for nome, idade, senha, nota in users_data:
            user_created = db_manager.create_user(nome, idade, senha, nota)
            if user_created:
                print(f"‚úÖ Usu√°rio {nome} criado")
            else:
                print(f"‚ö†Ô∏è  Usu√°rio {nome} j√° existe ou erro na cria√ß√£o")
        
        # Criar algumas aulas de exemplo
        print("\nüìö Criando aulas de exemplo...")
        aulas_data = [
            ("Introdu√ß√£o √† Programa√ß√£o", "Aula b√°sica sobre conceitos de programa√ß√£o e algoritmos", "programa√ß√£o, b√°sico, introdu√ß√£o", "Conceitos fundamentais de programa√ß√£o e desenvolvimento de software"),
            ("Matem√°tica B√°sica", "Opera√ß√µes matem√°ticas fundamentais e resolu√ß√£o de problemas", "matem√°tica, b√°sico, opera√ß√µes", "Adi√ß√£o, subtra√ß√£o, multiplica√ß√£o, divis√£o e problemas matem√°ticos"),
            ("Hist√≥ria do Brasil", "Per√≠odo colonial, independ√™ncia e rep√∫blica", "hist√≥ria, brasil, colonial", "Fatos hist√≥ricos importantes do Brasil desde o descobrimento"),
            ("F√≠sica - Mec√¢nica", "Conceitos b√°sicos de mec√¢nica cl√°ssica", "f√≠sica, mec√¢nica, movimento", "Leis de Newton, movimento retil√≠neo e circular"),
            ("Qu√≠mica Org√¢nica", "Compostos org√¢nicos e suas propriedades", "qu√≠mica, org√¢nica, compostos", "Hidrocarbonetos, √°lcoois, √°cidos e bases org√¢nicas"),
            ("Literatura Brasileira", "Principais autores e obras da literatura nacional", "literatura, brasileira, autores", "Machado de Assis, Graciliano Ramos, Clarice Lispector"),
            ("Geografia do Brasil", "Caracter√≠sticas f√≠sicas e humanas do territ√≥rio brasileiro", "geografia, brasil, territ√≥rio", "Relevo, clima, vegeta√ß√£o e popula√ß√£o brasileira"),
            ("Biologia Celular", "Estrutura e funcionamento das c√©lulas", "biologia, celular, estrutura", "Organelas celulares, metabolismo e divis√£o celular")
        ]
        
        for titulo, descricao, tags, legendas in aulas_data:
            aula_created = db_manager.create_aula(titulo, descricao, tags, legendas)
            if aula_created:
                print(f"‚úÖ Aula '{titulo}' criada")
            else:
                print(f"‚ö†Ô∏è  Aula '{titulo}' j√° existe ou erro na cria√ß√£o")
        
        # Criar algumas sugest√µes de exemplo
        print("\nüí° Criando sugest√µes de exemplo...")
        sugestoes_data = [
            {
                'titulo': 'Aula de Python para Iniciantes',
                'categoria': 'Programa√ß√£o',
                'nivel_dificuldade': 'Iniciante',
                'duracao_estimada': 60,
                'descricao': 'Aula introdut√≥ria sobre Python com exemplos pr√°ticos',
                'objetivos': 'Ensinar sintaxe b√°sica, vari√°veis, estruturas de controle',
                'sugerido_por': 'Jo√£o Silva',
                'status': 'Pendente'
            },
            {
                'titulo': 'Matem√°tica Financeira',
                'categoria': 'Matem√°tica',
                'nivel_dificuldade': 'Intermedi√°rio',
                'duracao_estimada': 90,
                'descricao': 'Conceitos de juros, descontos e aplica√ß√µes financeiras',
                'objetivos': 'Calcular juros simples e compostos, entender infla√ß√£o',
                'sugerido_por': 'Maria Santos',
                'status': 'Aprovado'
            }
        ]
        
        for sugestao in sugestoes_data:
            sugestao_created = db_manager.create_suggestion(sugestao)
            if sugestao_created:
                print(f"‚úÖ Sugest√£o '{sugestao['titulo']}' criada")
            else:
                print(f"‚ö†Ô∏è  Sugest√£o '{sugestao['titulo']}' j√° existe ou erro na cria√ß√£o")
        
        print("\nüìä Verificando dados criados...")
        
        # Verificar usu√°rios
        users = db_manager.get_all_users()
        print(f"‚úÖ Total de usu√°rios: {len(users)}")
        
        # Verificar aulas
        aulas = db_manager.get_all_aulas()
        print(f"‚úÖ Total de aulas: {len(aulas)}")
        
        # Verificar sugest√µes
        sugestoes = db_manager.get_all_suggestions()
        print(f"‚úÖ Total de sugest√µes: {len(sugestoes)}")
        
        # Verificar KPIs
        kpis = db_manager.get_dashboard_kpis()
        print(f"‚úÖ KPIs: {kpis}")
        
        print("\nüéâ Banco SQLite populado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao popular banco: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üå± Iniciando popula√ß√£o do banco SQLite...")
    print("=" * 60)
    
    success = seed_database()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ Popula√ß√£o conclu√≠da com sucesso!")
        print("üéØ O banco SQLite est√° pronto para uso com dados de exemplo")
        print("\nüìù Credenciais de acesso:")
        print("   - Administrador: admin / admin123")
        print("   - Usu√°rios de exemplo: Jo√£o, Maria, Pedro, Ana, Carlos")
    else:
        print("‚ùå Erro na popula√ß√£o do banco!")
        print("üîß Verifique os logs para mais detalhes")
