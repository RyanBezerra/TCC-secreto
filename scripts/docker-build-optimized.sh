#!/bin/bash

# EduAI - Script de Build Otimizado para Docker
# Este script otimiza o build do Docker para melhor portabilidade

set -e  # Parar em caso de erro

echo "üöÄ Iniciando build otimizado do EduAI Docker..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    error "Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
    exit 1
fi

# Verificar se docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    error "docker-compose n√£o encontrado. Instale o docker-compose e tente novamente."
    exit 1
fi

# Navegar para o diret√≥rio do projeto
cd "$(dirname "$0")/.."

log "Diret√≥rio de trabalho: $(pwd)"

# Parar containers existentes
log "Parando containers existentes..."
docker-compose -f docker/docker-compose.yml down --remove-orphans || true

# Limpar imagens antigas (opcional)
read -p "Deseja limpar imagens antigas? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log "Limpando imagens antigas..."
    docker system prune -f
    docker image prune -f
fi

# Build com cache otimizado
log "Iniciando build com cache otimizado..."

# Build da imagem principal
log "Construindo imagem principal..."
docker-compose -f docker/docker-compose.yml build --no-cache --parallel

# Verificar se o build foi bem-sucedido
if [ $? -eq 0 ]; then
    success "Build conclu√≠do com sucesso!"
else
    error "Falha no build. Verifique os logs acima."
    exit 1
fi

# Testar a imagem
log "Testando a imagem constru√≠da..."

# Executar teste de portabilidade
log "Executando testes de portabilidade..."
docker-compose -f docker/docker-compose.yml run --rm eduai python scripts/test-portability.py

if [ $? -eq 0 ]; then
    success "Testes de portabilidade passaram!"
else
    warning "Alguns testes de portabilidade falharam. Verifique os logs."
fi

# Mostrar informa√ß√µes da imagem
log "Informa√ß√µes da imagem constru√≠da:"
docker images | grep eduai

# Mostrar tamanho da imagem
IMAGE_SIZE=$(docker images --format "table {{.Size}}" eduai-app | tail -n 1)
log "Tamanho da imagem: $IMAGE_SIZE"

# Sugest√µes de otimiza√ß√£o
log "Sugest√µes para melhorar a portabilidade:"
echo "1. Certifique-se de que todas as m√°quinas tenham a mesma vers√£o do Docker"
echo "2. Use as mesmas vari√°veis de ambiente em todas as m√°quinas"
echo "3. Verifique se as fontes est√£o dispon√≠veis no sistema host"
echo "4. Teste em diferentes sistemas operacionais"

success "Build otimizado conclu√≠do!"
log "Para executar a aplica√ß√£o: docker-compose -f docker/docker-compose.yml up"
log "Para executar em modo desenvolvimento: docker-compose -f docker/docker-compose.yml up --build"
